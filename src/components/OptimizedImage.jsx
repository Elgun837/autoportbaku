import React, { useState, useRef, useEffect, useMemo } from 'react';

// –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏ –¥–ª—è shimmer –∞–Ω–∏–º–∞—Ü–∏–∏
const shimmerCSS = `
  @keyframes shimmer {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
  }
`;

// –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
if (typeof document !== 'undefined' && !document.querySelector('#shimmer-styles')) {
  const style = document.createElement('style');
  style.id = 'shimmer-styles';
  style.textContent = shimmerCSS;
  document.head.appendChild(style);
}

/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * @param {Object} props - –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {string} props.src - –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * @param {string} props.alt - Alt —Ç–µ–∫—Å—Ç
 * @param {boolean} props.lazy - –í–∫–ª—é—á–∏—Ç—å lazy loading (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
 * @param {boolean} props.responsive - Responsive –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
 * @param {Array} props.sizes - –ú–∞—Å—Å–∏–≤ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è responsive –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * @param {string} props.placeholder - –¶–≤–µ—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ placeholder
 * @param {boolean} props.blur - Blur —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
 * @param {Function} props.onLoad - Callback –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {Function} props.onError - Callback –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
 * @param {number} props.quality - –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–ª—è WebP)
 * @param {Object} rest - –û—Å—Ç–∞–ª—å–Ω—ã–µ props –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ img —Ç–µ–≥
 */
const OptimizedImage = ({
  src,
  alt = '',
  lazy = true,
  responsive = false,
  sizes = [400, 800, 1200, 1600],
  placeholder = '#f0f0f0',
  blur = true,
  onLoad,
  onError,
  quality = 80,
  ...rest
}) => {
  const [isInView, setIsInView] = useState(!lazy);
  const [isLoaded, setIsLoaded] = useState(false);
  const [hasError, setHasError] = useState(false);
  const imgRef = useRef(null);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º WebP –∏ fallback –∏—Å—Ç–æ—á–Ω–∏–∫–∏
  const imageSources = useMemo(() => {
    if (!src) return { webp: '', fallback: src };
    
    const basePath = src.replace(/\.[^/.]+$/, ''); // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    const ext = src.split('.').pop()?.toLowerCase();
    
    // –ï—Å–ª–∏ —É–∂–µ WebP, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (ext === 'webp') {
      return { webp: src, fallback: src };
    }
    
    // –ò—Å–∫–ª—é—á–∞–µ–º SVG –∏–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WebP
    if (ext === 'svg') {
      return { webp: '', fallback: src };
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º WebP –≤–µ—Ä—Å–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—Ç—Ä–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const webpSrc = `${basePath}.webp`;
    
    return { webp: webpSrc, fallback: src };
  }, [src]);

  // Intersection Observer –¥–ª—è lazy loading
  useEffect(() => {
    if (!lazy || isInView) return;

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsInView(true);
          observer.disconnect();
        }
      },
      { 
        threshold: 0.1,
        rootMargin: '50px'
      }
    );

    if (imgRef.current) {
      observer.observe(imgRef.current);
    }

    return () => observer.disconnect();
  }, [lazy, isInView]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
  const handleLoad = (event) => {
    setIsLoaded(true);
    onLoad?.(event);
  };

  const handleError = (event) => {
    setHasError(true);
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
    console.error('üñºÔ∏è OptimizedImage: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
      '–ò—Å—Ö–æ–¥–Ω—ã–π src': src,
      'WebP –ø—É—Ç—å': imageSources.webp,
      'Fallback –ø—É—Ç—å': imageSources.fallback,
      'Alt —Ç–µ–∫—Å—Ç': alt,
      '–°–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏': event
    });
    
    onError?.(event);
  };

  // –°—Ç–∏–ª–∏ –¥–ª—è container (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫)
  const containerStyle = {
    display: 'inline-block',
    position: 'relative',
    overflow: 'hidden',
    backgroundColor: placeholder,
    ...rest.style
  };

  // –°—Ç–∏–ª–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  const loadingImageStyle = {
    opacity: isLoaded ? 1 : 0,
    filter: (!isLoaded && blur) ? 'blur(4px)' : 'none',
    transition: 'opacity 0.3s ease-in-out, filter 0.3s ease-in-out'
  };

  // –ï—Å–ª–∏ –Ω–µ –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏ lazy loading –≤–∫–ª—é—á–µ–Ω
  if (!isInView) {
    return (
      <div 
        ref={imgRef} 
        style={containerStyle}
        {...rest}
        aria-label={alt}
      />
    );
  }

  // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π img —Ç–µ–≥ —Å broken image –∏–∫–æ–Ω–∫–æ–π
  // –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∏–¥–µ—Ç—å –ø—É—Ç—å –≤ DevTools –∏ –æ—Ç–ª–∞–∂–∏–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
  if (hasError) {
    return (
      <img
        ref={imgRef}
        src={imageSources.webp || imageSources.fallback}
        alt={`‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò: ${alt || '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'} | –ü—É—Ç—å: ${imageSources.webp || imageSources.fallback}`}
        title={`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: ${imageSources.webp || imageSources.fallback}`}
        onError={handleError}
        style={{
          
          ...rest.style
        }}
        {...rest}
      />
    );
  }

  // –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è - –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ img –±–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  if (isLoaded && !hasError) {
    return (
      <img
        ref={imgRef}
        src={imageSources.webp || imageSources.fallback}
        alt={alt}
        onLoad={handleLoad}
        onError={handleError}
        loading={lazy ? "lazy" : "eager"}
        decoding="async"
        {...rest}
      />
    );
  }

  // –í–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  return (
    <div style={containerStyle}>
      <img
        ref={imgRef}
        src={imageSources.webp || imageSources.fallback}
        alt={alt}
        style={loadingImageStyle}
        onLoad={handleLoad}
        onError={handleError}
        loading={lazy ? "lazy" : "eager"}
        decoding="async"
        {...rest}
      />
      
      {/* Placeholder/skeleton –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è */}
      {!isLoaded && !hasError && (
        <div
          style={{
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            background: `linear-gradient(90deg, ${placeholder} 0%, #e0e0e0 50%, ${placeholder} 100%)`,
            backgroundSize: '200% 100%',
            animation: 'shimmer 1.5s ease-in-out infinite',
          }}
        />
      )}
    </div>
  );
};

export default OptimizedImage;
/**
 * –ü—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ CSS —Å –ø–æ–º–æ—â—å—é Critical
 * –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —Å —Ñ–∞–π–ª–∞–º–∏ –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞
 */

import { generate } from 'critical';
import { readFileSync, writeFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const distPath = join(__dirname, '../dist');
const indexPath = join(distPath, 'index.html');

async function generateCriticalCSS() {
  console.log('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ CSS...');
  
  try {
    // –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π HTML —Ñ–∞–π–ª
    const originalHtml = readFileSync(indexPath, 'utf8');
    console.log('üìñ HTML —Ñ–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π CSS
    const result = await generate({
      html: originalHtml,
      base: distPath,
      
      // –†–∞–∑–º–µ—Ä—ã viewport –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      width: 1200,
      height: 900,
      dimensions: [
        {
          width: 320,
          height: 568,
        },
        {
          width: 768,
          height: 1024,
        },
        {
          width: 1200,
          height: 900,
        }
      ],
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      inline: true,
      minify: true,
      
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ CSS –ø—Ä–∞–≤–∏–ª–∞
      ignore: {
        atrule: ['@font-face'],
        rule: [/\.sr-only/, /\.visually-hidden/]
      }
    });

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ index.html
    writeFileSync(indexPath, result.html);

    console.log('‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π CSS —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (result && result.css) {
      const criticalSize = Buffer.byteLength(result.css, 'utf8');
      console.log(`üìä –†–∞–∑–º–µ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ CSS: ${(criticalSize / 1024).toFixed(2)} KB`);
    }
    
    console.log('üìÅ –§–∞–π–ª dist/index.html –æ–±–Ω–æ–≤–ª–µ–Ω —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º CSS');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ CSS:', error);
    if (error.message) {
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
    }
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
generateCriticalCSS();
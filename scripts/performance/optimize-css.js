import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { PurgeCSS } from 'purgecss';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// –†—É—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è CSS —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é PurgeCSS
const optimizeCSS = async () => {
  console.log('üßπ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø CSS –§–ê–ô–õ–û–í');
  console.log('='.repeat(50));

  const distPath = path.join(__dirname, '../../dist');
  const cssPath = path.join(distPath, 'assets/css');
  
  if (!fs.existsSync(cssPath)) {
    console.log('‚ùå CSS —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ npm run build');
    return;
  }

  // –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  const contentFiles = [
    path.join(__dirname, '../../src/**/*.{js,jsx}'),
    path.join(__dirname, '../../index.html'),
    path.join(__dirname, '../../public/**/*.html')
  ];

  // –ü–æ–ª—É—á–∞–µ–º CSS —Ñ–∞–π–ª—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  const cssFiles = fs.readdirSync(cssPath)
    .filter(file => file.endsWith('.css'))
    .filter(file => !file.includes('vendor')) // –ü–æ–∫–∞ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º vendor CSS
    .map(file => ({
      name: file,
      path: path.join(cssPath, file)
    }));

  console.log(`\nüìã –ù–∞–π–¥–µ–Ω–æ ${cssFiles.length} CSS —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:`);
  cssFiles.forEach(file => console.log(`   ‚Ä¢ ${file.name}`));

  let totalBefore = 0;
  let totalAfter = 0;
  let optimizedCount = 0;

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π CSS —Ñ–∞–π–ª
  for (const file of cssFiles) {
    try {
      const originalContent = fs.readFileSync(file.path, 'utf8');
      const originalSize = originalContent.length;
      
      console.log(`\nüîÑ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è ${file.name}...`);
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PurgeCSS
      const purgeOptions = {
        content: contentFiles,
        css: [file.path],
        safelist: [
          // AOS –∞–Ω–∏–º–∞—Ü–∏–∏
          /^aos-/,
          /^data-aos/,
          'aos-init',
          'aos-animate',
          
          // Swiper –∫–ª–∞—Å—Å—ã
          /^swiper/,
          
          // React –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
          /^react-/,
          /^image-gallery/,
          
          // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
          /^is-/,
          /^has-/,
          /^active/,
          /^loading/,
          /^shimmer/,
          /^error/,
          /^success/,
          /^invalid/,
          /^valid/,
          
          // Layout –∫–ª–∞—Å—Å—ã
          'container',
          'row',
          /^col-/,
          /^grid/,
          /^flex/,
          
          // –ü—Å–µ–≤–¥–æ-–∫–ª–∞—Å—Å—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
          ':hover',
          ':focus',
          ':active',
          ':visited',
          ':before',
          ':after',
          
          // Responsive –∫–ª–∞—Å—Å—ã
          /^sm:/,
          /^md:/,
          /^lg:/,
          /^xl:/,
          
          // Utility –∫–ª–∞—Å—Å—ã
          /^text-/,
          /^bg-/,
          /^border-/,
          /^p-/,
          /^m-/,
          /^w-/,
          /^h-/
        ],
        defaultExtractor: content => {
          // –£–ª—É—á—à–µ–Ω–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
          const broadMatches = content.match(/[^<>"'`\s]*[^<>"'`\s:]/g) || [];
          const innerMatches = content.match(/[^<>"'`\s.()]*[^<>"'`\s.():]/g) || [];
          const jsMatches = content.match(/(?:className|class)\s*[:=]\s*["'`]([^"'`]*)["'`]/g) || [];
          
          const jsClasses = jsMatches.map(match => 
            match.replace(/(?:className|class)\s*[:=]\s*["'`]([^"'`]*)["'`]/, '$1')
          ).join(' ').split(/\s+/);
          
          return [...broadMatches, ...innerMatches, ...jsClasses];
        }
      };

      const result = await new PurgeCSS().purge(purgeOptions);
      const optimizedContent = result[0]?.css || '';
      const optimizedSize = optimizedContent.length;
      
      if (optimizedSize < originalSize) {
        // –°–æ–∑–¥–∞—ë–º backup
        const backupPath = file.path + '.backup';
        fs.writeFileSync(backupPath, originalContent);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        fs.writeFileSync(file.path, optimizedContent);
        
        const reduction = ((originalSize - optimizedSize) / originalSize * 100).toFixed(1);
        
        console.log(`   ‚úÖ ${file.name}:`);
        console.log(`      –î–æ:     ${(originalSize / 1024).toFixed(2)}KB`);
        console.log(`      –ü–æ—Å–ª–µ:  ${(optimizedSize / 1024).toFixed(2)}KB`);
        console.log(`      –°–∂–∞—Ç–∏–µ: ${reduction}%`);
        console.log(`      Backup: ${path.basename(backupPath)}`);
        
        totalBefore += originalSize;
        totalAfter += optimizedSize;
        optimizedCount++;
      } else {
        console.log(`   ‚ö†Ô∏è ${file.name}: –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
        totalBefore += originalSize;
        totalAfter += originalSize;
      }
      
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ${file.name}:`, error.message);
    }
  }

  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:');
  console.log('='.repeat(50));
  console.log(`–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${optimizedCount}/${cssFiles.length}`);
  console.log(`–†–∞–∑–º–µ—Ä –¥–æ:             ${(totalBefore / 1024).toFixed(2)}KB`);
  console.log(`–†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ:          ${(totalAfter / 1024).toFixed(2)}KB`);
  
  if (totalBefore > 0) {
    const totalReduction = ((totalBefore - totalAfter) / totalBefore * 100).toFixed(1);
    console.log(`–û–±—â–µ–µ —Å–∂–∞—Ç–∏–µ:          ${totalReduction}%`);
    console.log(`–°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ:           ${((totalBefore - totalAfter) / 1024).toFixed(2)}KB`);
  }

  console.log('\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
  console.log('   1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–∞–π—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
  console.log('   2. –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–∑ backup —Ñ–∞–π–ª–æ–≤');
  console.log('   3. –î–ª—è –æ—Ç–∫–∞—Ç–∞: for file in dist/assets/css/*.backup; do mv "$file" "${file%.backup}"; done');
  console.log('   4. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ vendor CSS —Ñ–∞–π–ª—ã –æ—Ç–¥–µ–ª—å–Ω–æ');
};

optimizeCSS().catch(console.error);
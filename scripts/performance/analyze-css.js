import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { PurgeCSS } from 'purgecss';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// –ê–Ω–∞–ª–∏–∑ CSS —Ñ–∞–π–ª–æ–≤ –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å—Ç–∏–ª–µ–π
const analyzeCSSUsage = async () => {
  console.log('üé® –ê–ù–ê–õ–ò–ó –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø CSS');
  console.log('='.repeat(50));

  const distPath = path.join(__dirname, '../../dist');
  const cssPath = path.join(distPath, 'assets/css');
  
  if (!fs.existsSync(cssPath)) {
    console.log('‚ùå CSS —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ npm run build');
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ CSS —Ñ–∞–π–ª—ã
  const cssFiles = fs.readdirSync(cssPath)
    .filter(file => file.endsWith('.css'))
    .map(file => ({
      name: file,
      path: path.join(cssPath, file),
      size: fs.statSync(path.join(cssPath, file)).size
    }))
    .sort((a, b) => b.size - a.size);

  console.log('\nüìä –†–ê–ó–ú–ï–†–´ CSS –§–ê–ô–õ–û–í (–¥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏):');
  console.log('-'.repeat(60));
  
  let totalSize = 0;
  cssFiles.forEach((file, index) => {
    const sizeKB = (file.size / 1024).toFixed(2);
    totalSize += file.size;
    const status = file.size > 50000 ? '‚ùå' : file.size > 20000 ? '‚ö†Ô∏è' : '‚úÖ';
    console.log(`${index + 1}.`.padStart(3) + ` ${file.name.padEnd(35)} ${sizeKB.padStart(8)}KB ${status}`);
  });

  console.log('-'.repeat(60));
  console.log(`–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä CSS: ${(totalSize / 1024).toFixed(2)}KB`);

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π CSS —Ñ–∞–π–ª —Å PurgeCSS
  console.log('\nüîç –ê–ù–ê–õ–ò–ó –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú–û–ì–û CSS:');
  console.log('-'.repeat(60));

  const srcFiles = [
    path.join(__dirname, '../../src/**/*.{js,jsx}'),
    path.join(__dirname, '../../index.html')
  ];

  for (const file of cssFiles.slice(0, 5)) { // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø-5 —Ñ–∞–π–ª–æ–≤
    try {
      const originalContent = fs.readFileSync(file.path, 'utf8');
      
      const purgeResult = await new PurgeCSS().purge({
        content: srcFiles,
        css: [file.path],
        safelist: [
          // AOS –∞–Ω–∏–º–∞—Ü–∏–∏
          /^aos-/,
          /^data-aos/,
          // Swiper –∫–ª–∞—Å—Å—ã
          /^swiper-/,
          // React –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
          /^react-/,
          /^image-gallery/,
          // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
          /^is-/,
          /^has-/,
          /^active/,
          /^loading/,
          // Utility –∫–ª–∞—Å—Å—ã
          'container',
          'row',
          /^col-/,
          // –ü—Å–µ–≤–¥–æ-–∫–ª–∞—Å—Å—ã
          ':hover',
          ':focus',
          ':active'
        ]
      });

      const optimizedContent = purgeResult[0]?.css || '';
      const originalSize = originalContent.length;
      const optimizedSize = optimizedContent.length;
      const reduction = ((originalSize - optimizedSize) / originalSize * 100).toFixed(1);
      
      console.log(`üìÑ ${file.name}:`);
      console.log(`   –î–æ:     ${(originalSize / 1024).toFixed(2)}KB`);
      console.log(`   –ü–æ—Å–ª–µ:  ${(optimizedSize / 1024).toFixed(2)}KB`);
      console.log(`   –°–∂–∞—Ç–∏–µ: ${reduction}%`);
      console.log('');
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${file.name}:`, error.message);
    }
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò CSS:');
  console.log('-'.repeat(50));
  
  const largeFiles = cssFiles.filter(f => f.size > 20000);
  if (largeFiles.length > 0) {
    console.log('\nüîß –§–∞–π–ª—ã —Ç—Ä–µ–±—É—é—â–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
    largeFiles.forEach(file => {
      console.log(`  ‚Ä¢ ${file.name} (${(file.size / 1024).toFixed(2)}KB)`);
    });
  }

  console.log('\nüìà –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
  console.log('  1. –í–∫–ª—é—á–∏—Ç—å PurgeCSS –≤ production build');
  console.log('  2. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å vendor CSS –±–∏–±–ª–∏–æ—Ç–µ–∫');
  console.log('  3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CSS modules –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏');
  console.log('  4. –ò–Ω–ª–∞–π–Ω–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π CSS');
  console.log('  5. Lazy load –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π');

  console.log('\nüöÄ –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
  console.log('  ‚Ä¢ –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ CSS –Ω–∞ 40-60%');
  console.log('  ‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ FCP –Ω–∞ 200-400ms');
  console.log('  ‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–∏–µ PageSpeed Score –Ω–∞ 10-15 –ø—É–Ω–∫—Ç–æ–≤');
};

analyzeCSSUsage().catch(console.error);
/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ CSS —Å –ø–æ–º–æ—â—å—é Critical
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∞–π—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π CSS
 */

import { generate } from 'critical';
import { readFileSync, writeFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const distPath = join(__dirname, '../dist');
const indexPath = join(distPath, 'index.html');

async function generateCriticalCSS() {
  console.log('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ CSS...');
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π CSS (–ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è - multi-viewport)
    const result = await generate({
      // –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ - –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
      base: distPath,
      src: 'http://localhost:4174',
      target: {
        html: 'index.html',
        css: 'index.html'
      },
      
      // –†–∞–∑–º–µ—Ä—ã viewport –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è)
      width: 1200,
      height: 900,
      dimensions: [
        {
          width: 320,
          height: 568,
        },
        {
          width: 768,
          height: 1024,
        },
        {
          width: 1200,
          height: 900,
        }
      ],
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      inline: true, // –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π CSS –≤ HTML
      extract: false, // –ù–ï –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π CSS –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
      minify: true, // –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º
      
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ CSS –ø—Ä–∞–≤–∏–ª–∞
      ignore: {
        atrule: ['@font-face'],
        rule: [/\.sr-only/, /\.visually-hidden/]
      }
    });

    console.log('‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π CSS —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (result && result.css) {
      const criticalSize = Buffer.byteLength(result.css, 'utf8');
      console.log(`üìä –†–∞–∑–º–µ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ CSS: ${(criticalSize / 1024).toFixed(2)} KB`);
    }
    
    console.log('üìÅ –§–∞–π–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–∞–ø–∫–µ dist/');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ CSS:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
generateCriticalCSS();